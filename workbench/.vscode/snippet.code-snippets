{
	// Place your workbench ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"intinput": {
		"prefix": "uint",
		"body": [
			"int(input())"
		],
	},
	"inputtuple": {
		"prefix": "utuple",
		"body": [
			"map(int, input().split())"
		],
	},
	"inputlist": {
		"prefix": "ulist",
		"body": [
			"list(map(int, input().split()))"
		],
	},
	"inputvector": {
		"prefix": "uvec",
		"body": [
			"[int(input()) for _ in range(${1:n})]"
		],
	},
	"inputmatrix": {
		"prefix": "umat",
		"body": [
			"[list(map(int, input().split())) for _ in range(${1:n})]"
		],
	},
	"ceil": {
		"prefix": "uceil",
		"body": [
			"def ceil(X, Y):",
				"\treturn (X + Y - 1) // Y"
		],
	},
	"lcm": {
		"prefix": "ulcm",
		"body": [
			"from math import gcd\n\n",
			"def lcm(X, Y):",
				"\treturn (X * Y) // gcd(X, Y)"
		],
	},
	"nearlist": {
		"prefix": "unearlist",
		"body": [
			"def nearlist(N, LIST):",
				"\tNEAR = [set() for _ in range(N)]",
				"\tfor a, b in LIST:",
					"\t\tNEAR[a - 1].add(b - 1)",
					"\t\tNEAR[b - 1].add(a - 1)",
				"\treturn NEAR"
		],
	},
}
